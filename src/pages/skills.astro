---
import Layout from "../layouts/Layout.astro";
import SkillsGrid from "../components/SkillsGrid.astro";
const categories = [
  {
    title: "Web Development",
    columns: [
      {
        heading: "Frontend Technologies",
        skills: [
          "ReactJS",
          "NextJS",
          "Astro",
          "TailwindCSS",
          "Bootstrap",
          "HTML5",
          "CSS3",
          "JavaScript",
          "TypeScript",
        ],
      },
      {
        heading: "Backend & APIs",
        skills: [
          "NodeJS",
          "ExpressJS",
          "FastAPI",
          "Flask",
          "Stripe",
          "Clerk",
          "Kinde",
          "Gemini API",
          "DialogFlow",
        ],
      },
    ],
  },
  {
    title: "Databases & Storage",
    columns: [
      {
        heading: "Databases",
        skills: [
          "MongoDB",
          "MySQL",
          "Firebase",
          "SQLite3",
          "SQLAlchemy",
          "Prisma",
        ],
      },
      {
        heading: "Storage & Reconciliation",
        skills: ["Solana Reconciliation", "Google Sheets", "Webhooks"],
      },
    ],
  },
  {
    title: "Data Structures & Algorithms",
    columns: [
      {
        heading: "Data Structures",
        skills: [
          "Array",
          "Stack",
          "Queue",
          "Linked List",
          "Doubly Linked List",
          "Circular Linked List",
          "Hashing",
          "Binary Tree",
          "Binary Search Tree",
          "Heap",
          "Graph",
          "Trie",
        ],
      },
      {
        heading: "Algorithms",
        skills: [
          "Sorting",
          "Binary Search",
          "Recursion",
          "Backtracking",
          "Greedy Algorithms",
          "Dynamic Programming",
          "Sliding Window",
          "Two Pointers",
          "Graph Algorithms (BFS, DFS, Dijkstra)",
          "Topological Sort",
          "Prefix Sum",
          "Kadaneâ€™s Algorithm",
          "KMP Algorithm",
        ],
      },
    ],
  },
  {
    title: "Developer Tools & Practices",
    columns: [
      {
        heading: "Developer Environment",
        skills: ["Git", "GitHub", "Google Cloud Platform", "VS Code", "Docker"],
      },
      {
        heading: "Tools & Automation",
        skills: [ "Google Apps Script", "Webhooks", "Postman"],
      },
    ],
  },
  {
    title: "Machine Learning (Theory)",
    columns: [
      {
        heading: "Supervised & Ensemble Methods",
        skills: [
          "Linear Regression",
          "Logistic Regression",
          "Decision Tree",
          "Random Forest",
          "Ensemble Learning",
          "SVM",
          "KNN",
        ],
      },
      {
        heading: "Unsupervised & Optimization",
        skills: ["Clustering", "Dimensionality Reduction"],
      },
    ],
  },
];
---

<Layout title="Skills" description="Aarthi's Technical Skills.">
  <section class="container mx-auto px-8 sm:px-16 py-16">
    <div class="mb-16">
      <div class="flex flex-col md:flex-row md:items-end justify-between mb-4">
        <h1
          class="text-4xl md:text-5xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-blue-400"
        >
          Technical Skills & Expertise
        </h1>
        <a
          href="/ai-chat"
          class="inline-flex items-center gap-2 bg-gradient-to-r from-purple-600 to-blue-500 text-white px-4 py-2 rounded-lg hover:from-purple-700 hover:to-blue-600 transition-all text-sm mt-4 md:mt-0 w-auto self-start md:self-auto"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-4 w-4 flex-shrink-0"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"
            ></path>
          </svg>
          Ask AI
        </a>
      </div>

      <!-- Color Legend -->
      <div class="flex gap-4 items-center text-sm text-gray-700 mb-8">
        <div class="flex items-center gap-2">
          <span class="w-3 h-3 rounded-full bg-green-500"></span>
          Concept + Practical
        </div>
        <div class="flex items-center gap-2">
          <span class="w-3 h-3 rounded-full bg-yellow-400"></span>
          Conceptual Knowledge
        </div>
        <div class="flex items-center gap-2">
          <span class="w-3 h-3 rounded-full bg-red-500"></span>
          Just Know About It
        </div>
      </div>
    </div>

    <!-- Search Bar -->
    <div class="mb-12">
      <div class="relative">
        <input
          type="text"
          id="skillSearch"
          placeholder="Search skills..."
          class="w-full px-6 py-4 text-lg rounded-lg border border-gray-200 dark:border-gray-800 bg-white dark:bg-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
        />
        <div class="absolute right-4 top-1/2 -translate-y-1/2 text-gray-400">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-6 w-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </div>
      </div>
    </div>

    <!-- Skills Sections -->
    <SkillsGrid categories={categories} />

  </section>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const searchInput = document.getElementById(
        "skillSearch"
      ) as HTMLInputElement;
      const skillSections = document.querySelectorAll(".skill-section");

      if (!searchInput) return;

      function filterSkills(searchTerm: string) {
        const normalizedSearch = searchTerm.toLowerCase().trim();

        skillSections.forEach((section) => {
          const sectionElement = section as HTMLElement;
          const gridColumns = section.querySelectorAll(".grid-column");
          let sectionHasVisibleContent = false;

          gridColumns.forEach((column) => {
            const columnElement = column as HTMLElement;
            const tags = column.querySelectorAll(".skill-tag");
            let visibleTags = 0;

            tags.forEach((tag) => {
              const tagElement = tag as HTMLElement;
              const tagText = tagElement.textContent?.toLowerCase() || "";

              const matches =
                normalizedSearch === "" || tagText.includes(normalizedSearch);

              tagElement.style.display = matches ? "inline-block" : "none";
              if (matches) {
                visibleTags++;
                tagElement.style.opacity = "1";
                tagElement.style.transform = "translateY(0)";
              } else {
                tagElement.style.opacity = "0";
                tagElement.style.transform = "translateY(10px)";
              }
            });

            // Handle column visibility
            if (visibleTags > 0 || normalizedSearch === "") {
              columnElement.style.display = "block";
              sectionHasVisibleContent = true;
            } else {
              columnElement.style.display = "none";
            }
          });

          // Handle section visibility
          if (sectionHasVisibleContent || normalizedSearch === "") {
            sectionElement.style.display = "block";
            sectionElement.style.opacity = "1";
            sectionElement.style.transform = "translateY(0)";
          } else {
            sectionElement.style.display = "none";
            sectionElement.style.opacity = "0";
            sectionElement.style.transform = "translateY(10px)";
          }
        });
      }

      // Debounce function
      function debounce(func: Function, wait: number) {
        let timeout: ReturnType<typeof setTimeout>;
        return function executedFunction(...args: any[]) {
          const later = () => {
            clearTimeout(timeout);
            func(...args);
          };
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
        };
      }

      const debouncedFilter = debounce(
        (value: string) => filterSkills(value),
        150
      );
      searchInput.addEventListener("input", (e) => {
        const target = e.target as HTMLInputElement;
        debouncedFilter(target.value);
      });

      filterSkills("");
    });
  </script>

  <style>
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .skill-tag {
      transition: all 0.3s ease-in-out;
    }

    .skill-section {
      transition: all 0.3s ease-in-out;
    }

    .grid-column {
      transition: all 0.3s ease-in-out;
    }
  </style>
</Layout>
